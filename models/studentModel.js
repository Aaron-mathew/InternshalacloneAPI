const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const studentModel = new mongoose.Schema({
    firstname: {
        type: String,
        required: [true, "First Name is required"],
        minLength: [4, "First name should be atleast 4 characters long"]
    },
    lastname: {
        type: String,
        required: [true, "Last Name is required"],
        minLength: [4, "Last name should be atleast 4 characters long"]
    },
    contact: {
        type: String,
        required: [true, "Contact is required"],
        maxLength: [10, "Contact must not exceed 10 characters"],
        minLength: [10, "Contact should be atleast 10 characters long"],
    },
    city: {
        type: String,
        required: [true, "City Name is required"],
        minLength: [3, "City should be atleast 3 characters long"]
    },
    gender: {type: String, enum: ["Male","Female","Others"]},
    email: {
        type: String,
        unique: true,
        required: [true, "Email is required"],
        match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please fill a valid email address']
    },
    password: {
        type: String,
        select: false,
        maxLength: [15,"Password should not exceed more than 15 characters"],
        minLength: [6,"Password should have atleast 6 characters"],
        //match: []
    },
    resetPasswordToken: {
        type: String,
        default: "0",
    },
    avatar: {
        type: Object,
        default:{
            fileid: "",
            url: "https://plus.unsplash.com/premium_photo-1708110921253-7eed6d2ecb78?q=80&w=2574&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",    
        }
    },
    resume: {
        education: [],
        jobs: [],
        internships: [],
        responsibilities: [],
        courses: [],
        projects: [],
        skills: [],
        accomplishments: [],
    },
    internships: [
        {type: mongoose.Schema.Types.ObjectId, ref: 'internship'}
    ],
    jobs: [
        {type: mongoose.Schema.Types.ObjectId, ref: 'job'}
    ],
},
{timestamps:true});

studentModel.pre("save", function() {
    if(!this.isModified("password")){
        return;
    }//it will make the code work only when the password is changed
    let salt = bcrypt.genSaltSync(10);
    this.password = bcrypt.hashSync(this.password, salt);
});
//will work before saving studentModel

studentModel.methods.comparepassword = function(password) {
    return bcrypt.compareSync(password, this.password);
};//compares password using bcrypt

studentModel.methods.getjwttoken = function(){
    return jwt.sign({id: this._id}, process.env.JWT_SECRET, {
        expiresIn: process.env.JWT_EXPIRE,
    });
}//a string is saved in the browser it is generated by the person who is logging in

const Student = mongoose.model("student", studentModel);

module.exports = Student;

// {12th Video}